.class public final Lcom/corrodinggames/rts/appFramework/ix243;
.super Ljava/lang/Object;
.source "SourceFile"


# static fields
.field public static a:Z

.field public static b:I

.field public static c:Ljava/lang/String;


# direct methods
.method static constructor <clinit>()V
    .locals 1

    .line 42
    const/4 v0, 0x0

    sput-object v0, Lcom/corrodinggames/rts/appFramework/ix243;->c:Ljava/lang/String;

    return-void
.end method

.method public static a(Landroid/content/Context;)V
    .locals 4

    .line 89
    const/16 v1, 0x18

    .line 1057
    const-string v0, ""

    .line 1060
    invoke-static {p0}, Lcom/corrodinggames/rts/gameFramework/k1104;->b(Landroid/content/Context;)Z

    move-result v2

    if-eqz v2, :cond_0

    .line 1062
    const/16 v1, 0x12

    .line 1063
    const-string v0, "ClJ1c3RlZCBXYXJmYXJlIGlzIGFsc28gb24gV2luZG93cywgTGludXggYW5kIE1hYyB3aXRoIGZ1bGwgY3Jvc3NwbGF0Zm9ybSBtdWx0aXBsYXllciB3aXRoIGFuZHJvaWQhCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KKiogUnVzdGVkIFdhcmZhcmUgdjEuMTMuMyAtIEZ1bGwgVmVyc2lvbiBDaGFuZ2Vsb2cgKioKLS0tLS0KLU5ldyBtYXA6IE1hbnkgSXNsYW5kcyBMYXJnZSAoRnVsbCB2ZXJzaW9uIG9ubHkpCi1OZXcgdW5pdDogTWVjaCBFbmdpbmVlciAtIFQyIE1lY2ggYnVpbGRlciB3aXRoIEFBIGF0dGFjawotUGF0aCBmaW5kaW5nIHN5c3RlbSBoYXMgMngtM3ggYmV0dGVyIHBlcmZvcm1hbmNlIGFuZCB1c2VzIGxlc3MgbWVtb3J5LgotVGVhbSBsYXlvdXQgY2hhbmdlciB3aGVuIGhvc3RpbmcgYSBnYW1lIG9yIGluIGFkdmFuY2VkIHNraXJtaXNoLiAoZWcgZWFzaWx5IHN3aXRjaCB0byA1djUsIDN2M3YzLCBGRkEgYW5kIHNodWZmbGUgcGxheWVycykKLUEgbmV3IG1vZCBpbXBvcnRlciBvbiBhbmRyb2lkIHRvIG1ha2UgaW5zdGFsbGluZyBtb2RzIGVhc3kgKE5vdGU6IE1vZCBzdXBwb3J0IGluIGZ1bGwgdmVyc2lvbiBvbmx5KQogID4gQWxzbyB3b3JrcyB3aXRoIG1hcHMsIHJlcGxheXMgYW5kIHNhdmVzCi1TdXBwb3J0IGZvciBsb2FkaW5nIGNvbXByZXNzZWQgbW9kcyAoanVzdCByZW5hbWUgYSAuemlwIGZpbGUgdG8gLnJ3bW9kLCBvciB1c2UgaW1wb3J0ZXIpCi1HYW1lIGhhbmRsZXMgbW9yZSBtb2RzIGluc3RhbGxlZCBhdCB0aGUgc2FtZSB0aW1lCiAgPkRvZXNu4oCZdCBsb2FkIGRhdGEgZnJvbSBkaXNhYmxlZCBtb2RzIGJ5IGRlZmF1bHQKICA+U2lnbmlmaWNhbnRseSByZWR1Y2VkIHRleHR1cmUgbWVtb3J5IHVzZSBvbiBQQyB2ZXJzaW9uCiAgPlJ1bm5pbmcgb3V0IG9mIG1lbW9yeSBsb2FkaW5nIGEgdGV4dHVyZSByZXBsYWNlcyBpdCB3aXRoIGEgcGxhY2Vob2xkZXIgYW5kIHdhcm5zIGluc3RlYWQgb2YgY3Jhc2hpbmcKICA+UnVubmluZyBvdXQgb2YgbWVtb3J5IGxvYWRpbmcgbW9kIGF1ZGlvIGp1c3Qgd2FybnMgaW5zdGVhZCBvZiBjcmFzaGluZwotTG9uZyBsaXN0IG9mIG5ldyBtb2RkaW5nIGZlYXR1cmVzIGZvciBwZW9wbGUgdG8gbWFrZSBjb29sIG1vZHMgd2l0aCBpbmNsdWRpbmcgY3JlYXRpbmcgdGhlaXIgb3duIGN1c3RvbSByZXNvdXJjZXMsIGF0dGFjaGluZyB1bml0cyB0b2dldGhlciwgYW5kIGNyZWF0aW5nIGN1c3RvbSB1bml0IGJlaGF2aW91cgotQW5kcm9pZCBpbnRlcmZhY2UgaW1wcm92ZW1lbnRzIGFuZCBwb2xpc2gKLUJldHRlciBBSSB0aGF0IGlzIG1vcmUgYWdncmVzc2l2ZSBsYXRlIGdhbWUuCi1OZXcgJ21vZGRlZCcgdGFiIGluIHNhbmRib3ggdG8gc29ydCB0aHJvdWdoIGEgbGFyZ2UgbnVtYmVyIG9mIG1vZGRlZCB1bml0cwotRml4aW5nIGRlc3luY3MgcGxheWluZyBtdWx0aXBsYXllciBzdXJ2aXZhbAotU2VydmVyIGxpc3QgcmVmcmVzaGluZyBpcyBtdWNoIGZhc3RlciBvbiBhbmRyb2lkCi1Mb3RzIG9mIGJ1ZyBmaXhlcwotQmFsYW5jZToKICA+RXhwZXJpbWVudGFsIFRhbmsgLSBMYXJnZXIgZGFtYWdlIEFvRSwgc2xpZ2h0bHkgc2xvd2VyIGF0dGFjawogID5UZXNsYSBNZWNoIC0gUmVtb3ZlZCBhaXIgYXR0YWNrCiAgPkFydGlsbGVyeSBNZWNoIHByaWNlIGNoYW5nZWQgJDE3MDAgLT4gJDE0MDAKICA+SGVhdnkgQXJ0aWxsZXJ5IHByaWNlIGNoYW5nZWQgJDM4MDAgLT4gJDMxMDAKICA+QXJ0aWxsZXJ5IFR1cnJldCAtIExhcmdlciBBb0UgYW5kIHNsaWdodGx5IG1vcmUgZGFtYWdlCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KKiogUnVzdGVkIFdhcmZhcmUgdjEuMTMuMiAtIEZ1bGwgVmVyc2lvbiBDaGFuZ2Vsb2cgKioKLS0tLS0KLU5ldyBtYXA6IFZhbGxleSBBcmVuYSAoMTBwKSBbYnkgdWJlcl0gKEZ1bGwgb25seSkKLU5ldyBtYXA6IEtpbmdkb21zICgxMHApIFtieSBWdWxrYW5dIChGdWxsIG9ubHkpCi1TdXJyZW5kZXIgdm90aW5nIHN5c3RlbSBhZGRlZCB0byBtdWx0aXBsYXllcgotTWFwIHBpbmcgd2l0aCBjb250ZXh0IChlZyDigJhhdHRhY2sgaGVyZeKAmSwg4oCYYnVpbGQgaGVyZeKAmSksIGV4dHJhIHVzZWZ1bCB3aGVuIHBsYXlpbmcgd2l0aCBwZW9wbGUgZnJvbSBvdGhlciBsYW5ndWFnZXMKLUFsbG93IHBsYXllcnMgdG8gY2hhbmdlIHRoZWlyIG93biB0ZWFtcyBpbiBtdWx0aXBsYXllciBldmVuIGlmIHRoZXkgYXJlbuKAmXQgaG9zdHMKLVN0YXJ0IGFkdmFuY2VkIHNraXJtaXNoIGZyb20gYSBjdXN0b20gbWFwIHNjcmVlbgotRG91YmxlIGNsaWNrIHRvIGF0dGFjay1tb3ZlIHNldHRpbmcgYWRkZWQKLVJlc3luYyBhbmQgcmVqb2lucyBhcmUgbm93IG11Y2ggZmFzdGVyCi1CYWxhbmNlOgogwqAtRmxhbWUgdHVycmV0IGRhbWFnZTogMyAtPiA0CiDCoC1GaXJlIEJlZTogSHAgNTQwMCAtPiA0OTAwLCBCdWlsZCBzcGVlZDogNTkuNXMgLT4gODNzCiAgLVNjb3V0IGFuZCBMaWdodCBndW5zaGlwIGJ1aWxkIHRpbWVzIGluY3JlYXNlZAogwqAtRmFicmljYXRvcjogQnVpbGQgdGltZSAxMS45cyAtPiAyNy43cwogwqDCoC0tRmFicmljYXRvciBUMiBVcGdyYWRlIHRpbWU6IDQxLjZzIC0+IDU1LjVzCiDCoMKgLS1GYWJyaWNhdG9yIFQzIFVwZ3JhZGUgdGltZTogNTUuNXMgLT4gODMuM3MKLU5ldyBtb2RkaW5nIGZlYXR1cmVzIGFkZGVkIChzZWUgZnVsbCBjaGFuZ2UgbG9nKQotTG90cyBvZiBidWdmaXhlcwoK"

    .line 1068
    :cond_0
    new-instance v2, Ljava/lang/String;

    const/4 v3, 0x0

    invoke-static {v0, v3}, Landroid/util/Base64;->decode(Ljava/lang/String;I)[B

    move-result-object v0

    invoke-direct {v2, v0}, Ljava/lang/String;-><init>([B)V

    .line 1070
    const-string v0, "mesage:"

    invoke-static {v2}, Ljava/lang/String;->valueOf(Ljava/lang/Object;)Ljava/lang/String;

    move-result-object v3

    invoke-virtual {v0, v3}, Ljava/lang/String;->concat(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v0

    invoke-static {v0}, Lcom/corrodinggames/rts/gameFramework/k1104;->d(Ljava/lang/String;)V

    .line 1076
    const/4 v0, 0x1

    sput-boolean v0, Lcom/corrodinggames/rts/appFramework/ix243;->a:Z

    .line 1077
    sput v1, Lcom/corrodinggames/rts/appFramework/ix243;->b:I

    .line 1078
    sput-object v2, Lcom/corrodinggames/rts/appFramework/ix243;->c:Ljava/lang/String;

    .line 1104
    new-instance v0, Lcom/corrodinggames/rts/appFramework/iy244;

    invoke-direct {v0, p0}, Lcom/corrodinggames/rts/appFramework/iy244;-><init>(Landroid/content/Context;)V

    .line 1270
    invoke-virtual {v0}, Ljava/lang/Thread;->start()V

    .line 94
    return-void
.end method
